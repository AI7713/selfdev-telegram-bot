import os
import logging
import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MAIN_MENU, PRODUCT_MENU, DEMO_SCENARIOS = range(3)

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
DEMO_SCENARIOS = {
    '–≥—Ä–∏–º—É–∞—Ä': {
        '–∞—Ä—Ö–µ—Ç–∏–ø—ã': {
            'question': 'üîÆ –ö–∞–∫–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ —Å–µ–π—á–∞—Å?',
            'demo_answer': '–í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –Ω–∏–º–∏\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –¥–ª—è —Ä–æ—Å—Ç–∞\n\nüí´ –ü—Ä–∏–º–µ—Ä: –ï—Å–ª–∏ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è "–í–æ–∏–Ω" - —Ñ–æ–∫—É—Å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ö, –µ—Å–ª–∏ "–ú—É–¥—Ä–µ—Ü" - –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ.',
            'teaser': '–£–∑–Ω–∞–π—Ç–µ –∫–∞–∫–∏–µ 5 –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ —É–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—à–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏!'
        },
        '–º–µ—Ç–∞—Ñ–æ—Ä—ã': {
            'question': 'üåå –ö–∞–∫—É—é –º–µ—Ç–∞—Ñ–æ—Ä—É –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞?',
            'demo_answer': '–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç:\n‚Ä¢ –ú–µ—Ç–∞—Ñ–æ—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –∂–∏–∑–Ω–∏\n‚Ä¢ –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\nüé≠ –ü—Ä–∏–º–µ—Ä: "–í–∞—à–∞ –∂–∏–∑–Ω—å –∫–∞–∫ —Å–∞–¥" –∏–ª–∏ "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≥–µ—Ä–æ—è".',
            'teaser': '–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ—Ç–∞—Ñ–æ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ!'
        },
        '—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ': {
            'question': 'üß† –ö–∞–∫ —É–≥–ª—É–±–∏—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª—ã?',
            'demo_answer': '–í –ø–ª–∞—Ç–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ:\n‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª—ã\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã\n\nüìñ –ü—Ä–∏–º–µ—Ä: –†–∞–±–æ—Ç–∞ —Å –æ–±—Ä–∞–∑–∞–º–∏ –≤–æ–¥—ã, –æ–≥–Ω—è, –∑–µ–º–ª–∏ –∏ –≤–æ–∑–¥—É—Ö–∞.',
            'teaser': '–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!'
        }
    },
    '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': {
        '–∫–æ–Ω—Ñ–ª–∏–∫—Ç': {
            'question': '‚ö° –ö–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–±—è –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?',
            'demo_answer': '–ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∞—Å—Ç:\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–µ—ç—Å–∫–∞–ª–∞—Ü–∏–∏\n‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è\n‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n\nüõ°Ô∏è –ü—Ä–∏–º–µ—Ä: –ú–µ—Ç–æ–¥ "–Ø-–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π" –∏ —Ç–µ—Ö–Ω–∏–∫–∞ "–ó–µ—Ä–∫–∞–ª–æ".',
            'teaser': '–ù–∞—É—á–∏—Ç–µ—Å—å –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!'
        },
        '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞': {
            'question': 'üìã –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–ª–æ–∂–Ω—ã–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º?',
            'demo_answer': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤–∫–ª—é—á–∞–µ—Ç:\n‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π —Å—Ç–æ—Ä–æ–Ω\n‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π\n\nüéØ –ü—Ä–∏–º–µ—Ä: –ú–µ—Ç–æ–¥ BATNA - –ª—É—á—à–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–º—É —Å–æ–≥–ª–∞—à–µ–Ω–∏—é.',
            'teaser': '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —à–ª–∏ –ø–æ –≤–∞—à–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é!'
        },
        '–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è': {
            'question': 'üõ°Ô∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏?',
            'demo_answer': '–í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:\n‚Ä¢ –¢–∏–ø–æ–ª–æ–≥–∏—è –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π\n‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ—Ç–≤–µ—Ç–æ–≤\n‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π\n\nüí° –ü—Ä–∏–º–µ—Ä: –¢–µ—Ö–Ω–∏–∫–∞ "–°–æ–≥–ª–∞—Å–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ" –≤–º–µ—Å—Ç–æ —Å–ø–æ—Ä–∞.',
            'teaser': '–ù–∞—É—á–∏—Ç–µ—Å—å –≤–∏–¥–µ—Ç—å –≤ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è—Ö —Å–∫—Ä—ã—Ç—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏!'
        }
    }
}

# –°–ª—É—á–∞–π–Ω—ã–µ —Ç–∏–∑–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å"
DEMO_TEASERS = {
    '–≥—Ä–∏–º—É–∞—Ä': [
        "üîÆ –£–∑–Ω–∞–π—Ç–µ –∫–∞–∫–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã —É–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—à–µ–π –∂–∏–∑–Ω—å—é",
        "üåå –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ—Ç–∞—Ñ–æ—Ä—É –¥–ª—è –≤–∞—à–µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞", 
        "üß† –ù–∞—á–Ω–∏—Ç–µ –≥–ª—É–±–∏–Ω–Ω–æ–µ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª—ã",
        "üìñ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"
    ],
    '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': [
        "‚ö° –ù–∞—É—á–∏—Ç–µ—Å—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏",
        "üìã –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª",
        "üõ°Ô∏è –û—Å–≤–æ–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏",
        "üí° –ü—Ä–µ–≤—Ä–∞—â–∞–π—Ç–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
    ]
}

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("üîÆ –ì—Ä–∏–º—É–∞—Ä")],
        [KeyboardButton("üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫")],
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üé≠ –î–æ–±—Ä–æ welcome –≤ –±–æ—Ç —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:",
        reply_markup=reply_markup
    )
    
    return MAIN_MENU

async def handle_main_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    text = update.message.text
    user = update.message.from_user
    
    if text == "üîÆ –ì—Ä–∏–º—É–∞—Ä":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –≤—ã–±—Ä–∞–ª –ì—Ä–∏–º—É–∞—Ä")
        return await show_product_menu(update, context, '–≥—Ä–∏–º—É–∞—Ä')
    
    elif text == "üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –≤—ã–±—Ä–∞–ª –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫")
        return await show_product_menu(update, context, '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫')
    
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text(
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞–≤—ã–∫–æ–≤.\n\n"
            "üîÆ –ì—Ä–∏–º—É–∞—Ä - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã\n"
            "üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫ - –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö –∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö\n\n"
            "–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–º–æ –∏ –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É."
        )
        return MAIN_MENU
    
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")
        return MAIN_MENU

async def show_product_menu(update: Update, context: CallbackContext, product: str) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    context.user_data['current_product'] = product
    
    product_names = {
        '–≥—Ä–∏–º—É–∞—Ä': 'üîÆ –ì—Ä–∏–º—É–∞—Ä',
        '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': 'üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫'
    }
    
    product_descriptions = {
        '–≥—Ä–∏–º—É–∞—Ä': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã',
        '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': '–ü–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –≤–µ–¥–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤'
    }
    
    keyboard = [
        [KeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å")],
        [KeyboardButton("üí≥ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"{product_names[product]}\n\n"
        f"{product_descriptions[product]}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )
    
    return PRODUCT_MENU

async def handle_product_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–∞"""
    text = update.message.text
    product = context.user_data.get('current_product', 'unknown')
    user = update.message.from_user
    
    if text == "üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –ø—Ä–æ–±—É–µ—Ç –¥–µ–º–æ {product}")
        return await show_demo_scenarios(update, context, product)
    
    elif text == "üí≥ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {product}")
        await update.message.reply_text(
            "üöÄ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç:\n\n"
            "‚Ä¢ –ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n" 
            "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ–¥—É–∫—Ç–∞\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –Ω–∞ 5 –¥–Ω–µ–π\n\n"
            "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø!"
        )
        return PRODUCT_MENU
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")
        return PRODUCT_MENU

async def show_demo_scenarios(update: Update, context: CallbackContext, product: str) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏"""
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–∑–µ—Ä
    teaser = random.choice(DEMO_TEASERS[product])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenarios = DEMO_SCENARIOS[product]
    keyboard = []
    for scenario_key in scenarios.keys():
        keyboard.append([KeyboardButton(scenarios[scenario_key]['question'])])
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"{teaser}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∞—Å–ø–µ–∫—Ç:",
        reply_markup=reply_markup
    )
    
    return DEMO_SCENARIOS

async def handle_demo_scenarios(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è"""
    text = update.message.text
    product = context.user_data.get('current_product', 'unknown')
    user = update.message.from_user
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await show_product_menu(update, context, product)
    
    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenarios = DEMO_SCENARIOS[product]
    for scenario_key, scenario_data in scenarios.items():
        if scenario_data['question'] == text:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –≤—ã–±—Ä–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_key} –¥–ª—è {product}")
            
            await update.message.reply_text(
                f"{scenario_data['demo_answer']}\n\n"
                f"üíé {scenario_data['teaser']}"
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
            keyboard = [
                [KeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π")],
                [KeyboardButton("üîô –í –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–∞")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=reply_markup
            )
            return DEMO_SCENARIOS
    
    # –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")
    return DEMO_SCENARIOS

async def handle_demo_actions(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –¥–µ–º–æ"""
    text = update.message.text
    product = context.user_data.get('current_product', 'unknown')
    
    if text == "üéØ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π":
        return await show_demo_scenarios(update, context, product)
    elif text == "üîô –í –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–∞":
        return await show_product_menu(update, context, product)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")
        return DEMO_SCENARIOS

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start',
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
            ],
            PRODUCT_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_menu)
            ],
            DEMO_SCENARIOS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_demo_scenarios),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_demo_actions)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
