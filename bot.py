import os
import logging
import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN')

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–∏
DEMO_SCENARIOS = {
    '–≥—Ä–∏–º—É–∞—Ä': {
        '–∞—Ä—Ö–µ—Ç–∏–ø—ã': 'üîÆ –í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏: –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –Ω–∏–º–∏, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –¥–ª—è —Ä–æ—Å—Ç–∞.',
        '–º–µ—Ç–∞—Ñ–æ—Ä—ã': 'üåå –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: –º–µ—Ç–∞—Ñ–æ—Ä–∞ –≤–∞—à–µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞, —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.',
        '—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ': 'üß† –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã.'
    },
    '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': {
        '–∫–æ–Ω—Ñ–ª–∏–∫—Ç': '‚ö° –í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–µ—ç—Å–∫–∞–ª–∞—Ü–∏–∏, —Ç–µ—Ö–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è, —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.',
        '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞': 'üìã –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π —Å—Ç–æ—Ä–æ–Ω, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π.',
        '–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è': 'üõ°Ô∏è –ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è: —Ç–∏–ø–æ–ª–æ–≥–∏—è –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ—Ç–≤–µ—Ç–æ–≤, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π.'
    }
}

class BotState:
    def __init__(self):
        self.user_states = {}

bot_state = BotState()

async def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot_state.user_states[user.id] = 'MAIN_MENU'
    
    keyboard = [
        [KeyboardButton("üîÆ –ì—Ä–∏–º—É–∞—Ä")],
        [KeyboardButton("üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫")],
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    text = update.message.text
    current_state = bot_state.user_states.get(user.id, 'MAIN_MENU')
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name}: {text} (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state})")
    
    if current_state == 'MAIN_MENU':
        await handle_main_menu(update, context)
    elif current_state == 'PRODUCT_MENU':
        await handle_product_menu(update, context)
    elif current_state == 'DEMO_MENU':
        await handle_demo_menu(update, context)

async def handle_main_menu(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    text = update.message.text
    
    if text == "üîÆ –ì—Ä–∏–º—É–∞—Ä":
        bot_state.user_states[user.id] = 'PRODUCT_MENU'
        context.user_data['current_product'] = '–≥—Ä–∏–º—É–∞—Ä'
        await show_product_menu(update, context, '–≥—Ä–∏–º—É–∞—Ä')
        
    elif text == "üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫":
        bot_state.user_states[user.id] = 'PRODUCT_MENU'
        context.user_data['current_product'] = '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫'
        await show_product_menu(update, context, '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫')
        
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤.\n\n"
            "üîÆ –ì—Ä–∏–º—É–∞—Ä - –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã\n"
            "üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫ - —Å–ª–æ–∂–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏\n\n"
            "–î–µ–º–æ-–≤–µ—Ä—Å–∏—è + –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ AI."
        )
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")

async def show_product_menu(update: Update, context: CallbackContext, product: str) -> None:
    product_names = {
        '–≥—Ä–∏–º—É–∞—Ä': 'üîÆ –ì—Ä–∏–º—É–∞—Ä',
        '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': 'üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫'
    }
    
    keyboard = [
        [KeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å")],
        [KeyboardButton("üí≥ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"{product_names[product]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )

async def handle_product_menu(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    text = update.message.text
    product = context.user_data.get('current_product', 'unknown')
    
    if text == "üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å":
        bot_state.user_states[user.id] = 'DEMO_MENU'
        await show_demo_scenarios(update, context, product)
        
    elif text == "üí≥ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø":
        await update.message.reply_text(
            "üöÄ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç:\n\n"
            "‚Ä¢ –ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n" 
            "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –Ω–∞ 5 –¥–Ω–µ–π\n\n"
            "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø!"
        )
        
    elif text == "üîô –ù–∞–∑–∞–¥":
        bot_state.user_states[user.id] = 'MAIN_MENU'
        await start(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")

async def show_demo_scenarios(update: Update, context: CallbackContext, product: str) -> None:
    scenarios = DEMO_SCENARIOS[product]
    
    keyboard = []
    if product == '–≥—Ä–∏–º—É–∞—Ä':
        keyboard = [
            [KeyboardButton("üîÆ –ê—Ä—Ö–µ—Ç–∏–ø—ã")],
            [KeyboardButton("üåå –ú–µ—Ç–∞—Ñ–æ—Ä—ã")],
            [KeyboardButton("üß† –°–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
    else:
        keyboard = [
            [KeyboardButton("‚ö° –ö–æ–Ω—Ñ–ª–∏–∫—Ç")],
            [KeyboardButton("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞")],
            [KeyboardButton("üõ°Ô∏è –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∞—Å–ø–µ–∫—Ç:",
        reply_markup=reply_markup
    )

async def handle_demo_menu(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    text = update.message.text
    product = context.user_data.get('current_product', 'unknown')
    
    if text == "üîô –ù–∞–∑–∞–¥":
        bot_state.user_states[user.id] = 'PRODUCT_MENU'
        await show_product_menu(update, context, product)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
    scenario_map = {
        'üîÆ –ê—Ä—Ö–µ—Ç–∏–ø—ã': '–∞—Ä—Ö–µ—Ç–∏–ø—ã',
        'üåå –ú–µ—Ç–∞—Ñ–æ—Ä—ã': '–º–µ—Ç–∞—Ñ–æ—Ä—ã', 
        'üß† –°–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ': '—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ',
        '‚ö° –ö–æ–Ω—Ñ–ª–∏–∫—Ç': '–∫–æ–Ω—Ñ–ª–∏–∫—Ç',
        'üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞': '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
        'üõ°Ô∏è –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è': '–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è'
    }
    
    scenario_key = scenario_map.get(text)
    if scenario_key and scenario_key in DEMO_SCENARIOS[product]:
        demo_answer = DEMO_SCENARIOS[product][scenario_key]
        await update.message.reply_text(demo_answer)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
        keyboard = [
            [KeyboardButton("üéØ –î—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π")],
            [KeyboardButton("üîô –í –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
        
    elif text == "üéØ –î—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π":
        await show_demo_scenarios(update, context, product)
        
    elif text == "üîô –í –º–µ–Ω—é":
        bot_state.user_states[user.id] = 'PRODUCT_MENU'
        await show_product_menu(update, context, product)
        
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ ConversationHandler
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
