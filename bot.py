import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MAIN_MENU, PRODUCT_MENU = range(2)

# –î–µ–º–æ-–æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
DEMO_RESPONSES = {
    '–≥—Ä–∏–º—É–∞—Ä': 'üîÆ –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ì—Ä–∏–º—É–∞—Ä–∞. –í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã.',
    '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': 'üíº –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫–∞. –í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.'
}

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("üîÆ –ì—Ä–∏–º—É–∞—Ä")],
        [KeyboardButton("üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫")],
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:",
        reply_markup=reply_markup
    )
    
    return MAIN_MENU

async def handle_main_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    text = update.message.text
    user = update.message.from_user
    
    if text == "üîÆ –ì—Ä–∏–º—É–∞—Ä":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –≤—ã–±—Ä–∞–ª –ì—Ä–∏–º—É–∞—Ä")
        return await show_product_menu(update, context, '–≥—Ä–∏–º—É–∞—Ä')
    
    elif text == "üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –≤—ã–±—Ä–∞–ª –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫")
        return await show_product_menu(update, context, '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫')
    
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text(
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞–≤—ã–∫–æ–≤.\n\n"
            "üîÆ –ì—Ä–∏–º—É–∞—Ä - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä—ã\n"
            "üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫ - –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö\n\n"
            "–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é –∏ –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É."
        )
        return MAIN_MENU
    
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")
        return MAIN_MENU

async def show_product_menu(update: Update, context: CallbackContext, product: str) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    context.user_data['current_product'] = product
    
    product_names = {
        '–≥—Ä–∏–º—É–∞—Ä': 'üîÆ –ì—Ä–∏–º—É–∞—Ä',
        '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': 'üíº –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫'
    }
    
    product_descriptions = {
        '–≥—Ä–∏–º—É–∞—Ä': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã',
        '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫': '–ü–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –≤–µ–¥–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤'
    }
    
    keyboard = [
        [KeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å")],
        [KeyboardButton("üí≥ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"{product_names[product]}\n\n"
        f"{product_descriptions[product]}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )
    
    return PRODUCT_MENU

async def handle_product_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–∞"""
    text = update.message.text
    product = context.user_data.get('current_product', 'unknown')
    user = update.message.from_user
    
    if text == "üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –ø—Ä–æ–±—É–µ—Ç –¥–µ–º–æ {product}")
        demo_text = DEMO_RESPONSES.get(product, '–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
        await update.message.reply_text(demo_text)
        return PRODUCT_MENU
    
    elif text == "üí≥ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {product}")
        await update.message.reply_text(
            "üöÄ –ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç:\n\n"
            "‚Ä¢ –ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–ø–æ–º–æ—â–Ω–∏–∫–æ–º\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n" 
            "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ–¥—É–∫—Ç–∞\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –Ω–∞ 5 –¥–Ω–µ–π\n\n"
            "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø!"
        )
        return PRODUCT_MENU
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        return await start(update, context)
    
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:")
        return PRODUCT_MENU

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start',
        reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True)
    )
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
            ],
            PRODUCT_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_menu)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
